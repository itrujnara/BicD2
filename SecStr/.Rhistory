# we will re-split the data, we shall make it replicable
set.seed(2137)
# remove columns with no variance
mnist_X <- mnist %>% select(-label)
mnist_Y <- mnist %>% select(label)
mnist_X <- mnist_X %>% select(where(function(x) var(x) > 0))
# reduce the dimensionality
pca <- prcomp(mnist_X)
pca_X <- data.frame(pca$x[,1:50])
# add the labels back in
mnist <- pca_X %>% bind_cols(mnist_Y)
# split the data
mnist_train <- mnist %>% group_by(label) %>% slice_sample(n = 500) %>% ungroup()
mnist_test <- setdiff(mnist, mnist_train)
# load the data
mnist <- read.csv("train.csv")
mnist$label <- factor(mnist$label)
# we will re-split the data, we shall make it replicable
set.seed(2137)
# remove columns with no variance
mnist_X <- mnist %>% select(-label)
mnist_Y <- mnist %>% select(label)
mnist_X <- mnist_X %>% select(where(function(x) var(x) > 0))
# reduce the dimensionality
pca <- prcomp(mnist_X)
pca_X <- data.frame(pca$x[,1:50])
# add the labels back in
mnist <- pca_X %>% bind_cols(mnist_Y)
# split the data
mnist_train <- mnist %>% group_by(label) %>% slice_sample(n = 500) %>% ungroup()
mnist_test <- setdiff(mnist, mnist_train) %>% slice_sample(n = 5000)
net.mnist.basic <- neuralnet(label ~ ., mnist_train, hidden = c(10,10), rep = 5,
lifesign = "full", lifesign.step = 1000, stepmax = 10000)
net.mnist.basic <- neuralnet(label ~ ., mnist_train, hidden = c(10,10), rep = 5,
lifesign = "full", lifesign.step = 1000, stepmax = 10000,
threshold = 1.0)
plot(net.mnist.basic, rep = "best")
# we will re-split the data, we shall make it replicable
set.seed(2137)
# remove columns with no variance
mnist_X <- mnist %>% select(-label)
mnist_Y <- mnist %>% select(label)
mnist_X <- mnist_X %>% select(where(function(x) var(x) > 0))
# reduce the dimensionality
pca <- prcomp(mnist_X)
pca_X <- data.frame(pca$x[,1:30])
# add the labels back in
mnist <- pca_X %>% bind_cols(mnist_Y)
# split the data
mnist_train <- mnist %>% group_by(label) %>% slice_sample(n = 500) %>% ungroup()
mnist_test <- setdiff(mnist, mnist_train) %>% slice_sample(n = 5000)
# load the data
mnist <- read.csv("train.csv")
mnist$label <- factor(mnist$label)
# check if labels are balanced
table(mnist$label)
net.mnist.raw <- neuralnet(label ~ ., mnist_train, hidden = 1, rep = 1, lifesign = "full")
# we will re-split the data, we shall make it replicable
set.seed(2137)
# remove columns with no variance
mnist_X <- mnist %>% select(-label)
mnist_Y <- mnist %>% select(label)
mnist_X <- mnist_X %>% select(where(function(x) var(x) > 0))
# reduce the dimensionality
pca <- prcomp(mnist_X)
pca_X <- data.frame(pca$x[,1:30])
# add the labels back in
mnist <- pca_X %>% bind_cols(mnist_Y)
# split the data
mnist_train <- mnist %>% group_by(label) %>% slice_sample(n = 500) %>% ungroup()
mnist_test <- setdiff(mnist, mnist_train) %>% slice_sample(n = 5000)
net.mnist.basic <- neuralnet(label ~ ., mnist_train, hidden = c(10,10), rep = 5,
lifesign = "full", lifesign.step = 1000, stepmax = 10000,
threshold = 1.0)
devtools::install_github("bips-hb/neuralnet")
library(neuralnet)
library(tidyverse)
# load the data
mnist <- read.csv("train.csv")
mnist$label <- factor(mnist$label)
# check if labels are balanced
table(mnist$label)
# we will re-split the data, we shall make it replicable
set.seed(2137)
# remove columns with no variance
mnist_X <- mnist %>% select(-label)
mnist_Y <- mnist %>% select(label)
mnist_X <- mnist_X %>% select(where(function(x) var(x) > 0))
# reduce the dimensionality
pca <- prcomp(mnist_X)
pca_X <- data.frame(pca$x[,1:30])
# add the labels back in
mnist <- pca_X %>% bind_cols(mnist_Y)
# split the data
mnist_train <- mnist %>% group_by(label) %>% slice_sample(n = 500) %>% ungroup()
mnist_test <- setdiff(mnist, mnist_train) %>% slice_sample(n = 5000)
net.mnist.basic <- neuralnet(label ~ ., mnist_train, hidden = c(10,10), rep = 5,
lifesign = "full", lifesign.step = 1000, stepmax = 10000,
threshold = 1.0)
knitr::opts_chunk$set(echo = TRUE)
library(ElemStatLearn)
library(pracma)
library(leaps)
library(MASS)
library(lars)
library(pls)
library(tidyverse)
library(ggpubr)
data(prostate)
pairs( prostate[,1:9], col="violet" )
newdata <- scale(prostate[,1:8], center = T, scale = T)
newdata <- cbind(newdata, prostate$lpsa, prostate$train)
colnames(newdata) <- colnames(prostate)
data.train <- prostate[prostate$train == T, 1:9]
data.test <- prostate[prostate$train == F, 1:9]
c <- cond(data.matrix(prostate[,1:8]))
print(paste("condition number of prostate data is:", c, sep = " "))
corrmat <- cor(data.matrix(prostate[,1:8]), method = "pearson")
heatmap(corrmat, symm = T)
ols <- lm(lpsa ~ ., data.train)
summary(ols)
predols <- predict(ols, data.test)
err.ols <- sum((predols - data.test$lpsa) ** 2)
err.ols
ggplot(data.test, aes(x = lpsa, y = predols)) +
geom_point(col = "dodgerblue") +
labs(x = "observed lpsa values", y = "lpsa values predicted with ols", title = "Comparing real lpsa observations from test data to OLS predictions") +
geom_abline(slope=1, intercept = 0, col = "coral") +
theme_minimal()
df <- data.frame(observed = data.test$lpsa, predicted = predols)
metalm <- lm(predicted ~ observed, df)
summary(metalm)
ggplot(df, aes(x = observed, y = predicted)) +
geom_point(col = "orange") +
labs(x = "observed lpsa values", y = "lpsa values predicted with ols", title = "Comparing real lpsa observations from test data to OLS predictions") +
geom_abline(slope=1, intercept = 0, col = "palegreen2") +
geom_abline(slope=0.50073, intercept = 1.22293, col = "coral2") +
theme_minimal()
summary(lm(lpsa ~ svi, data.train))
summary(lm(lpsa ~ svi + lcavol, data.train))
cor.test(data.train$lcavol, data.train$svi)
lr2<- leaps(data.train[,1:8],data.train[,9],method='r2', nbest=1, names=colnames(data.train)[1:8])
View(lr2$which)
lcp <- leaps(data.train[,1:8],data.train[,9],method='Cp', nbest=1, names=colnames(data.train)[1:8])
View(lcp$which)
pCp <- ggplot() +
geom_point(aes(x = lcp$size, y = lcp$Cp), col = "darkorange") +
labs(x = "Subset size", y = "Mallows' Cp") +
geom_hline(yintercept = min(lcp$Cp), col = "lightgreen", linetype = "dashed") +
theme_minimal()
pR2 <- ggplot() +
geom_point(aes(x = lr2$size, y = lr2$r2), col = "brown") +
labs(x = "Subset size", y = "R-squared") +
theme_minimal()
ggarrange(pCp, pR2)
lcp$which[which.min(lcp$Cp),]
lm_minCp <- lm(lpsa ~ lcavol + lweight + age + lbph + svi + lcp + pgg45, data.train)
summary(lm_minCp)
pred_lmCp<- predict(lm_minCp, data.test)
err.lmcp <- sum((pred_lmCp - data.test$lpsa) ** 2)
err.lmcp
df <- data.frame(observed = data.test$lpsa, predicted = pred_lmCp)
metalm <- lm(predicted ~ observed, df)
summary(metalm)
ggplot(df, aes(x = observed, y = predicted)) +
geom_point(col = "orange") +
labs(x = "observed lpsa values", y = "lpsa values predicted by model", title = "Comparing real lpsa observations from test data to minimum Cp model predictions") +
geom_abline(slope=1, intercept = 0, col = "palegreen2") +
geom_abline(slope=0.50573, intercept = 1.21650, col = "coral2") +
theme_minimal()
m.init <- lm(lpsa ~ 1 , data=data.train)
m.forward <- stepAIC(m.init,scope=list(upper=~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,lower=~1), direction="forward")
y.pred.forward <- predict(m.forward,data.test)
err.fwd <- sum((y.pred.forward - data.test$lpsa)^2)
summary((y.pred.forward - data.test$lpsa)^2)
m.init.b <- lm(lpsa ~ . , data=data.train)
m.backward <- stepAIC(m.init.b, scope=list(upper=~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,lower=~1), direction="backward")
y.pred.backward <- predict(m.backward,data.test)
err.bwd <- sum((y.pred.backward - data.test$lpsa)^2)
summary((y.pred.backward - data.test$lpsa)^2)
m.init.h <- lm(lpsa ~ 1 , data=data.train)
m.hybrid <- stepAIC(m.init.h,
scope=list(upper=~lcavol+lweight+age+lbph+svi+lcp+gleason+pgg45,lower=~1) ,
direction="both")
lambda_list <- as.list(seq(from = 0, to = 20, by = 0.1))
ridge.models <- lapply(lambda_list, function(x) lm.ridge(lpsa ~ ., data.train, lambda = x))
GCVs <- sapply(ridge.models, function(x) x$GCV)
lambdas <- unlist(lambda_list)
ggplot() +
geom_point(aes(x = lambdas, y = GCVs), col = "brown") +
geom_vline(xintercept = lambdas[which.min(GCVs)], linetype = "dashed", col = "darkorange") +
labs(x = "value of lambda", y = "GCV", title = "Ridge regression model GCV against the value of lambda") +
theme_minimal()
m.ridge <- ridge.models[[which.min(GCVs)]]
m.ridge$coef
y.pred.ridge <- scale(data.test[,1:8],center = m.ridge$xm, scale = m.ridge$scales)%*%
m.ridge$coef + m.ridge$ym
err.ridge <- sum((y.pred.ridge - data.test$lpsa) ** 2)
print(paste("RSS:",err.ridge,sep=" "))
summary(err.ridge)
m.lasso <- lars(as.matrix(data.train[,1:8]), data.train[,9], type = "lasso")
plot(m.lasso)
cv.lars(as.matrix(data.train[,1:8]), data.train[,9], type = "lasso")
coef.lasso <-
predict(m.lasso,as.matrix(data.test[,1:8]),s=0.5,type="coefficient",mode="fraction")
coef.lasso.2 <-
predict(m.lasso,as.matrix(data.test[,1:8]),s=1,type="coefficient",mode="fraction")
y.pred.lasso <- predict(m.lasso,as.matrix(data.test[,1:8]),s=0.5
,type="fit",mode="fraction")
y.pred.lasso.2 <- predict(m.lasso,as.matrix(data.test[,1:8]),s=1
,type="fit",mode="fraction")
pred.lasso <- y.pred.lasso$fit
pred.lasso.2 <- y.pred.lasso.2$fit
err.lasso <- sum((data.test[,9] - pred.lasso) ^ 2)
err.lasso.2 <- sum((data.test[,9] - pred.lasso.2) ^ 2)
print(err.lasso)
print(err.lasso.2)
m.pcr <- pcr(lpsa ~ ., data = data.train, validation = "CV")
ggplot() +
geom_point(aes(x = 1:8, y = m.pcr$validation$PRESS %>% t()), col = "brown") +
geom_hline(yintercept = min(m.pcr$validation$PRESS %>% t()), col = "darkorange", linetype = "dashed") +
labs(x="Number of components", y = "Predicted sum of squares", title = "PCR error in training") +
theme_minimal()
pred.pcr <- predict(m.pcr, data.test[,1:8])
err.pcr <- apply(pred.pcr, 3, function(x) sum((data.test[,9] - x) ^ 2))
ggplot() +
geom_point(aes(x = 1:8, y = err.pcr), col = "brown") +
geom_hline(yintercept = min(err.pcr), col = "darkorange", linetype = "dashed") +
labs(x="Number of components", y = "Predicted sum of squares", title = "PCR error in validation") +
theme_minimal()
m.pls <- plsr(lpsa ~ ., data = data.train, validation = "CV")
ggplot() +
geom_point(aes(x = 1:8, y = m.pcr$validation$PRESS %>% t()), col = "brown") +
geom_hline(yintercept = min(m.pcr$validation$PRESS %>% t()), col = "darkorange", linetype = "dashed") +
labs(x="Number of components", y = "Predicted sum of squares", title = "PLS error in training") +
theme_minimal()
pred.pls <- predict(m.pls, data.test[,1:8])
err.pls <- apply(pred.pls, 3, function(x) sum((data.test[,9] - x) ^ 2))
ggplot() +
geom_point(aes(x = 1:8, y = err.pls), col = "brown") +
geom_hline(yintercept = min(err.pls), col = "darkorange", linetype = "dashed") +
labs(x="Number of components", y = "Predicted sum of squares", title = "PLS error in validation") +
theme_minimal()
print("Minimum error by model")
print(paste("OLS:", err.ols))
print(paste("Feature selection (Cp):", err.lmcp))
print(paste("Forward selection:", err.fwd))
print(paste("Backward selection:", err.bwd))
print(paste("Ridge regression:", err.ridge))
print(paste("LASSO (low threshold):", err.lasso))
print(paste("LASSO (high threshold):", err.lasso.2))
print(paste("PCR:", min(err.pcr)))
print(paste("PLS:", min(err.pls)))
?prostate
# p3
ggplot(msleep) +
aes(x = vore, y = sleep_total, fill = conservation) +
geom_col() +
scale_fill_viridis_d(na.value = "grey80") +
labs(x = "", y = "Sleep time in hours", title = "Animal sleep times", fill = "Conservation type",
caption = "Source: msleep") +
theme_light()
library(tidyverse)
# p1
ggplot(data.frame(Titanic)) +
aes(x = Age, y = Freq, fill = Survived) +
geom_bar(position = "stack", stat = "identity") +
facet_grid(cols = vars(Sex), rows = vars(Class)) +
scale_fill_manual(values = c("#79AEB2", "#4A6274")) +
labs(y = "Passenger Count", title = "Survival Rate on the Titanic", caption = "Source: Titanic") +
theme_light()
# p2
ggplot(ToothGrowth) +
aes(x = supp, y = len, fill = supp) +
geom_boxplot() +
facet_wrap(~dose) +
scale_fill_manual(values = c("#58A6A6", "#EFA355")) +
labs(x = "Supplement type", y = "Tooth length", title = "Tooth length vs. Supplement type",
fill = "Supplement type", caption = "Source: ToothGrowth") +
theme_light()
# p3
ggplot(msleep) +
aes(x = vore, y = sleep_total, fill = conservation) +
geom_col() +
scale_fill_viridis_d(na.value = "grey80") +
labs(x = "", y = "Sleep time in hours", title = "Animal sleep times", fill = "Conservation type",
caption = "Source: msleep") +
theme_light()
View(mpg)
# p4
ggplot(mpg) +
aes(x = as.factor(year), y = city) +
geom_boxplot() +
facet_wrap(~drive)
# p4
ggplot(mpg) +
aes(x = as.factor(year), y = city) +
geom_boxplot() +
facet_wrap(~drv)
# p4
ggplot(mpg) +
aes(x = as.factor(year), y = cty) +
geom_boxplot() +
facet_wrap(~drv)
# p4
ggplot(mpg) +
aes(x = as.factor(year), y = cty, fill = year) +
geom_boxplot() +
facet_wrap(~drv) +
scale_fill_manual(values = c("#4CC3CD", "#FEE883")) +
labs(y = "Miles/Gallon", title = "Change in fuel economy", caption = "Source: mpg")
# p4
ggplot(mpg) +
aes(x = as.factor(year), y = cty, fill = as.factor(year)) +
geom_boxplot() +
facet_wrap(~drv) +
scale_fill_manual(values = c("#4CC3CD", "#FEE883")) +
labs(y = "Miles/Gallon", title = "Change in fuel economy", caption = "Source: mpg")
# p4
ggplot(mpg) +
aes(x = as.factor(year), y = cty, fill = as.factor(year)) +
geom_boxplot() +
facet_wrap(~drv) +
scale_fill_manual(values = c("#4CC3CD", "#FEE883")) +
labs(y = "Miles/Gallon", title = "Change in fuel economy", caption = "Source: mpg",
fill = "Year of manufacture")
View(midwest)
# p4
ggplot(mpg) +
aes(x = as.factor(year), y = cty, fill = as.factor(year)) +
geom_boxplot() +
facet_wrap(~drv) +
scale_fill_manual(values = c("#4CC3CD", "#FEE883")) +
labs(y = "Miles/Gallon", title = "Change in fuel economy", caption = "Source: mpg",
fill = "Year of manufacture") +
theme_light()
# p5
ggplot(midwest) +
aes(x = area, y = poptotal, size = popdensity, color = state) +
geom_point() +
labs(x = "Area", y = "Population", title = "Area Vs. Population",
size = "Population density", color = "State", caption = "Source: midwest")
# p5
ggplot(midwest) +
aes(x = area, y = poptotal, size = popdensity, color = state) +
geom_point() +
scale_color_viridis_d() +
labs(x = "Area", y = "Population", title = "Area Vs. Population",
size = "Population density", color = "State", caption = "Source: midwest")
View(diamonds)
# p5
ggplot(midwest) +
aes(x = area, y = poptotal, size = popdensity, color = state) +
geom_point() +
scale_color_viridis_d() +
labs(x = "Area", y = "Population", title = "Area Vs. Population",
size = "Population density", color = "State", caption = "Source: midwest") +
theme_light()
# p6
ggplot(diamonds) +
aes(x = price, y = carat, color = clarity) +
geom_point() +
facet_wrap(~color) +
labs(x = "Price", y = "Carat", color = "Clarity", title = "Diamond Price per Carat",
caption = "Source: diamonds")
# p6
ggplot(diamonds) +
aes(x = price, y = carat, color = clarity) +
geom_point() +
facet_wrap(~color) +
labs(x = "Price", y = "Carat", color = "Clarity", title = "Diamond Price per Carat",
caption = "Source: diamonds") +
theme_light()
# p6
ggplot(diamonds) +
aes(x = price, y = carat, color = clarity) +
geom_point() +
facet_grid(cols = vars(color)) +
labs(x = "Price", y = "Carat", color = "Clarity", title = "Diamond Price per Carat",
caption = "Source: diamonds") +
theme_light()
View(HairEyeColor)
# p7
ggplot(HairEyeColor) +
aes(x = Eye, y = Freq, fill = Sex) +
geom_col(position = "stack")
# p7
ggplot(data.frame(HairEyeColor)) +
aes(x = Eye, y = Freq, fill = Sex) +
geom_col(position = "stack") +
facet_grid(cols = vars(Hair)) +
labs(x = "Eye color", y = "Frequency", fill = "Sex", title = "Hair and eye color",
caption = "Source: HairEyeColor")
# p7
ggplot(data.frame(HairEyeColor)) +
aes(x = Eye, y = Freq, fill = Sex) +
geom_col(position = "stack") +
facet_grid(cols = vars(Hair)) +
scale_fill_manual(values = c("#58A6A6", "#EFA355")) +
labs(x = "Eye color", y = "Frequency", fill = "Sex", title = "Hair and eye color",
caption = "Source: HairEyeColor") +
theme_light()
View(infert)
?infert
# p8
ggplot(infert) +
aes(x = education, y = stratum, fill = education) +
geom_boxplot() +
facet_wrap(~induced)
caption = "Source: infert")
# p8
ggplot(infert) +
aes(x = education, y = stratum, fill = education) +
geom_boxplot() +
facet_wrap(~induced) +
scale_fill_manual(values = c("#900C3F", "#C70039", "#FF5733")) +
labs(x = "Education", y = "Stratum number", title = "Infertility after Spontaneous and Induced Abortion",
caption = "Source: infert") +
theme_light()
library(tidyverse)
# p1
ggplot(data.frame(Titanic)) +
aes(x = Age, y = Freq, fill = Survived) +
geom_bar(position = "stack", stat = "identity") +
facet_grid(cols = vars(Sex), rows = vars(Class)) +
scale_fill_manual(values = c("#79AEB2", "#4A6274")) +
labs(y = "Passenger Count", title = "Survival Rate on the Titanic", caption = "Source: Titanic") +
theme_light()
# p2
ggplot(ToothGrowth) +
aes(x = supp, y = len, fill = supp) +
geom_boxplot() +
facet_wrap(~dose) +
scale_fill_manual(values = c("#58A6A6", "#EFA355")) +
labs(x = "Supplement type", y = "Tooth length", title = "Tooth length vs. Supplement type",
fill = "Supplement type", caption = "Source: ToothGrowth") +
theme_light()
# p3
ggplot(msleep) +
aes(x = vore, y = sleep_total, fill = conservation) +
geom_col() +
scale_fill_viridis_d(na.value = "grey80") +
labs(x = "", y = "Sleep time in hours", title = "Animal sleep times", fill = "Conservation type",
caption = "Source: msleep") +
theme_light()
# p4
ggplot(mpg) +
aes(x = as.factor(year), y = cty, fill = as.factor(year)) +
geom_boxplot() +
facet_wrap(~drv) +
scale_fill_manual(values = c("#4CC3CD", "#FEE883")) +
labs(y = "Miles/Gallon", title = "Change in fuel economy", caption = "Source: mpg",
fill = "Year of manufacture") +
theme_light()
# p5
ggplot(midwest) +
aes(x = area, y = poptotal, size = popdensity, color = state) +
geom_point() +
scale_color_viridis_d() +
labs(x = "Area", y = "Population", title = "Area Vs. Population",
size = "Population density", color = "State", caption = "Source: midwest") +
theme_light()
# p6
ggplot(diamonds) +
aes(x = price, y = carat, color = clarity) +
geom_point() +
facet_grid(cols = vars(color)) +
labs(x = "Price", y = "Carat", color = "Clarity", title = "Diamond Price per Carat",
caption = "Source: diamonds") +
theme_light()
# p7
ggplot(data.frame(HairEyeColor)) +
aes(x = Eye, y = Freq, fill = Sex) +
geom_col(position = "stack") +
facet_grid(cols = vars(Hair)) +
scale_fill_manual(values = c("#58A6A6", "#EFA355")) +
labs(x = "Eye color", y = "Frequency", fill = "Sex", title = "Hair and eye color",
caption = "Source: HairEyeColor") +
theme_light()
# p8
ggplot(infert) +
aes(x = education, y = stratum, fill = education) +
geom_boxplot() +
facet_wrap(~induced) +
scale_fill_manual(values = c("#900C3F", "#C70039", "#FF5733")) +
labs(x = "Education", y = "Stratum number", title = "Infertility after Spontaneous and Induced Abortion",
caption = "Source: infert") +
theme_light()
shiny::runApp('College/Y3T1/Data_Vis/Practical_4/GTEX_Plots')
setwd("CRG/BicD2/SecStr")
getwd()
dir()
data <- read.delim("data/features.tsv")
rownames(data) <- data$Species
View(data)
data$LongHelix_Length %o% data$LongHelix_Length
outer(data$LongHelix_Length, data$LongHelix_Length, function(x,y) abs(x-y))
long_diff <- outer(data$LongHelix_Length, data$LongHelix_Length, function(x,y) abs(x-y))
View(long_diff)
data <- read.delim("data/features.tsv")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/CRG/BicD2/SecStr/scripts/calculate_diff.R", echo=TRUE)
View(short_diff)
View(linker_diff)
View(long_diff)
write.table(long_diff, "data/long_diff.tsv")
?write.table
source("~/CRG/BicD2/SecStr/scripts/calculate_diff.R", echo=TRUE)
write.table(long_diff, "data/long_diff.tsv", quote = FALSE, sep = "\t", col.names = F)
source("~/CRG/BicD2/SecStr/scripts/calculate_diff.R", echo=TRUE)
source("~/CRG/BicD2/SecStr/scripts/calculate_diff.R", echo=TRUE)
